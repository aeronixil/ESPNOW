#include <esp_now.h>
#include <WiFi.h>

// REPLACE WITH THE MAC Address of your receiver 

String devIdentifier = "devAlpha";
uint8_t peerAddress[] = {0x44, 0x17, 0x93, 0x7D, 0xB5, 0x10};
int temp = 0;
String str = "nothing";
String str2 = "iamiRonman";

// Define variables to store incoming readings
String receivedMsg;
String receivedFrom;
int receivedNumber;

// Variable to store if sending data was successful
String success;

//Structure example to send data
//Must match the receiver structure
typedef struct data_Packet {
    String msg;
    String deviceName;
    int number = 0;             
    
} struct_message;

// data packet object to store data to be sent
data_Packet goingOut;


// data packet object to store receving data
data_Packet comingIn;

esp_now_peer_info_t peerInfo;

// Callback when data is sent
void OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status) {
  Serial.print("\r\nLast Packet Send Status:\t");
  Serial.println(status == ESP_NOW_SEND_SUCCESS ? "Delivery Success" : "Delivery Fail");
  if (status ==0){
    success = "Delivery Success :)";
  }
  else{
    success = "Delivery Fail :(";
  }
}

// Callback when data is received
void OnDataRecv(const uint8_t * mac, const uint8_t *incomingData, int len) {
  memcpy(&comingIn, incomingData, sizeof(comingIn));
  Serial.print("Bytes received: ");
  Serial.println(len);
  receivedMsg = comingIn.msg;
  receivedNumber = comingIn.number;
  receivedFrom = comingIn.deviceName;

  Serial.print("message from: ");
  Serial.println(receivedFrom);
  Serial.print("message: ");
  Serial.println(receivedMsg);
  Serial.print("transmission unit: ");
  Serial.println(receivedNumber);
  Serial.println("\n\n\n\n\n\n");
}
 
void setup() {
  // Init Serial Monitor
  Serial.begin(115200);
 
  // Set device as a Wi-Fi Station
  WiFi.mode(WIFI_STA);

  // Init ESP-NOW
  if (esp_now_init() != ESP_OK) {
    Serial.println("Error initializing ESP-NOW");
    return;
  }

  // Once ESPNow is successfully Init, we will register for Send CB to
  // get the status of Trasnmitted packet
  esp_now_register_send_cb(OnDataSent);
  
  // Register peer
  memcpy(peerInfo.peer_addr, peerAddress, 6);
  peerInfo.channel = 0;  
  peerInfo.encrypt = false;
  
  // Add peer        
  if (esp_now_add_peer(&peerInfo) != ESP_OK){
    Serial.println("Failed to add peer");
    return;
  }
  // Register for a callback function that will be called when data is received
  esp_now_register_recv_cb(OnDataRecv);
}
 
void loop() {
 
  // Set values to send
  if(temp%2 == 0)
    goingOut.msg = str;
 else
    goingOut.msg = str2;
  goingOut.number = temp++;
  goingOut.deviceName = devIdentifier;

  // Send message via ESP-NOW
  esp_err_t result = esp_now_send(peerAddress, (uint8_t *) &goingOut, sizeof(goingOut));
   
  if (result == ESP_OK) {
    Serial.println("Sent with success");
  }
  else {
    Serial.println("Error sending the data");
  }

  delay(5000);
}


